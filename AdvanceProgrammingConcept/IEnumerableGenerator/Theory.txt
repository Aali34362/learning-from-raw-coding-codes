welcome everyone today we're gonna be taking a look at innumerable and first we'll basically have a little explanation on how it works and then we're gonna take a deep ish dive because it's not very deep the topic is not that big nevertheless let's go ahead and get started so a simple way to create an ienumerable is you would do a public enumerable and let's pick a number so we want the bees to generate numbers and the thing about ienumerable in other languages it can be known as a generator
okay so you use it to generate things and here we'll just say get this doesn't really need any fancy names we'll just call it get and what we just want to do is get our heads around what is actually happening when you use an ienumerable so all we're going to do is we're going to yield one and you will have to say yield return okay and then we'll yield return - so why yield return why not just return so a short explanation in words is when you have just returned you exit the function there and then if you have
yield return you sort of throw and a value but then you're still carrying on executing the function and we will see how this happens in just a second what I will do is I'll also just put steps it in here so we can see in what order these execute okay so let's go ahead dump the one well dump two here and three at the end here so let's go ahead and quickly change these hey so if I do get so I will be getting my enumerable so at this point if I hover over this this is an ienumerable open I can go ahead and select stuff
from here now what I actually want to do is I want to just dump this and what this will do is this will enumerate the list so if I run this I have one two three and then I have a list as well hey so what happens if I run this again while I execute the list again kind of like I'm executing a function and then I'm executing it again so let's go ahead and do the following because usually you know when we execute a function we get a new value every single time so let's go ahead copy this and store this in a variable we'll just call
it a for enumerable we'll store it and then get we'll do a dump and we will replace this get with an e as well okay so now we're basically grabbing the same value right we run this we still get the same result so this is the whole point about a generator when you trigger the generator it will emit a value one by one okay and you every time you call a generator you're triggering the generation of values okay so to paint a clearer picture let's bring this in a more realistic example so let's say that
we have this innumerable and for each bar a 1 and E let's actually rename the e to innumerable so it's a little bit easier and E one will be e and I'll actually make a foreach loop and what we'll do is we will just dump E as the value okay and what I will do before this is actually let's just run this first ok so we can see that happens is we execute one first we give the return value and then we enter the for loop ok and we dump it we then ask enumerable for the next value and it basically says
right let's carry on from here into the next bit so it has to execute too and it goes into two it returns two and then we dump the two and then it goes again do you have the next value and then it basically has to go alright let me see if I have any other values it goes the three and then there is nothing left so it will basically say I didn't get nothing and then it will exit ok and you will see a little bit more how this works when we do a custom implementation but essentially what you might do and
this is a very realistic mistake that you can make is essentially you can have an enumerable let's grab this value because it can't spell and what you might do is you might grab the count right and what might happen is you might use the count and then you will reuse the enumerable okay and we'll dump the count here okay so what's going to happen is when we trigger the count to find out how many elements are inside this enumerable we will need to enumerate the enumerable okay the act of enumeration is essentially
your triggering the generator okay you're gonna start the generator it's gonna produce its values and then it will stop the next time you need a value from it you're gonna trigger it again and it's gonna generate the same values okay and the way you use this generator is you don't grab all the values at once what you do is it spits out a value you process it and then it spits out the next this is meant to help you work with memory more efficient because you're not allocating like a thousand items you're
processing one item at a time so your only concern is that you don't enumerate the list more than once okay so we run the code here what you will see is we enumerated the first time to output the count and then we enumerate the third time sorry second time but then again we use the value one-by-one what you can do is instead of enumerable what I will do is I will comment this out and I will place numeral built enumerable here and we will call a to less than this and instead of enumerable I'll say that
this is a list now and we don't need to call the count function on the list we can just call count and what will happen now is you will see once we call the two lists okay we enumerate then and there and then we convert that list that numerated list to a list and then we can basically check the count we can iterate that so if you have to do more than one operation on the values generated by the enumerable you wanted to list them but beware that you are allocating memory but this is not really a problem in our
day and age we have a lot of memory to spare but do bear in mind if you're working with gigabytes of memory you might take this integral you might want to take this into consideration let's go ahead and have a last example of the innumerable I will comment all of these out I will grab my in numerable and go down here and what I will do is I just want to again kind of emplace that mental image of items going through one by one by one especially when you are using linked okay so what we're gonna do
is we're gonna check if the number so number is less than 10 and because we only have two numbers that's all that's gonna happen okay but then what I'm gonna do is whenever I consume this number I'm also gonna dump it and I'm gonna say we're all right so this is gonna happen in the where clause and we're gonna have a number value and on top it's gonna say where and what I'm gonna do then is I'm just gonna run select and I'm just gonna select the number itself okay so I'm just gonna
return the number I'm grabbing the number as the number so it's a very pointless select statement other than I want to explain what's happened what's actually happening right so we're gonna do dump and we're going to select here and what I'm gonna do it on the end is because if I run this there is no actual reason to know about the values what we have created here is an ienumerable these will return numerals as well so we essentially grabbed the generator or an ienumerable and sharp which is essentially a generator
and the ienumerable are the same things and we have gone ahead and extended at once but basically took the generator and we said right you also do this thing now and then we put the select statement on it and said you do this thing now as well so what we actually need to do is we need to enumerate it trigger we basically need to ask for a value back right when we ask for a value that's when we start enumerated the generator or trigger the generator and this is why when you call to list or first order default or account you need to know
something about the items in the generator and that's when the enumeration triggers so let's go ahead and just trigger the count on here just so we trigger the enumeration and what I want to see is the flow of the item okay so the number one is the one out put it here once we return the one from the get method or the generator it will first go for the where clause and then it will go for the Select clause and that's it and then it basically returns to the get generator and asks for the next value
and then again it goes for the where and then it goes for the Select and then it goes do you have the next value and then basically says output three no there is nothing left all right and let's essentially just realize that a generator or nine numerable emits a value one by one so that's enough for a quick overview of the ienumerable let's go ahead and have a deep fish dive into a custom simple implementation of the ienumerable object which this function really creates we'll have a closer look at it later on so
what we want to achieve is a generation of values and basically having sort of like a function through which we put the first value before grabbing the next value so all we really have is a loop with a state machine from which we grab the value depending on where we are okay that's all generator is so let's go ahead and create a public plus my simple gen gen 4 generator right and we will just have another public let's just have an integer value where we'll try to expose and we will just say and we grab the
next value all right so public well as value and will appease the same condition where our condition will really be is our number below two and we start at one so let's go ahead and do that we'll start at one and we'll say if value is bigger than two and then we have no more values otherwise we want to return true okay and then we want to be able to get this value so let's go ahead and say a public and get value or maybe rather just make it big volume and return the underscore value okay so what
can happen now now we can have a while loop where we can essentially use our generator so or let's call it simple Gen equals new my simple Gen and we'll use the simple ghent to check if as a value right you can have a value if so execute okay let's go ahead and grab the value from simple Gen value and let's go ahead and dump the volume right that we'll do dump on the volume and you'll notice here it's an infinite look well let me let me go ahead and stop that and every time we get the value we will increment
it all right so we'll actually run in into this if statement all right so we get the one and two maybe to just get a more of a clearer perspective on this I will dump these numbers as well so every time we try to check for a has value what I will do is I will output this value here let's go ahead and run this so you can see that the result is pretty much identical we have a generator we kind of do a loop over it and there is some stuff that we do inside of it right it's just a difference in how we write
code do we want to use yield returns to return the same type from a function and then that will kind of generate this class for us or do we want to be writing a new object every single time we need a generator kind of thing all right and and there is the whole link obstruction that you can have based on the generators which is quite nice so this is why the generators exist in this form they're a very common construct that we use in programming ok can actually take a look at this gate function as well so
one of my viewers suggested to me the alts are combined to use the il inspector so I'm gonna be using that to see what the compiler is doing with the ienumerable so here I have my gap function and essentially if we take a look at it we can see that it's inheriting from ienumerable of type int enumerable that's just an ienumerable ienumerator and a numerator so the same enumerator is generic so what is happening here is we have a current value which is essentially what we have implemented as a value and in here we
also have the current which is the current value for us it would be our underscore value field we then also have the notable move next function which is kind of how we have has value field or sorry has value function where we check we have the next value and basically the takeaway here you can go through these functions it's not gonna tell you much other than basically the function that you write here gives you back an object okay and you can actually go ahead and implement these types of objects yourself so if we go back to the deepest
dive we will comment out our simple generator and below here are actually let's go back here let's get some space here and what we will do is we'll create a for each loop we'll create a bar value in actual generator right so we will go ahead and create an actual generator and you my actual Jen learn yeah it's not gonna generate this for me yeah let's go ahead and create this class public glass my actual gin I will drop this down my simple Jen so it's a little bit easier to see all of
this thing and yeah I want to remove these brackets those are not supposed to be there so the primary thing that we're gonna get here is first there's gonna be in there and this statement is gonna say for each statement cannot operate on variables of type my actual Jen because my actual Jen does not contain a public instance definition for yet enumerator so basically all it's saying is that we need a function that will be named get enumerator but let's go ahead and just simulate that eventually we will come up
to the actual class that we've seen in the aisle inspector so public void get a numerator I think that's what it was asking for yeah and void does not contain a definition for current is our next error and essentially what this is gonna be leading up to is that you need specific classes with specific fields in order to make this syntax work so let's go ahead and then hair it from the same things that that class was inheriting and we'll slowly build up this generator class so let's go ahead and
inherit from an ienumerable event will generate a couple of functions so because we have an enumerator here this enumerator has been generated a little bit weirdly so let's go ahead remove this bit and on here we will remove this getenumerator but on the beginning we will have to type it public okay this object will implement the ienumerable interface and now we want to return an enumerator interface okay and in the actual implementation that is being generated from this enumerable function implements both of these so
let's go ahead and make it so we can return this from here okay so let's go ahead and implement this as well Oh a numerator implements interface hide the results so it's a little bit easier to see we'll have the current which I mean we can pretty much grab a couple of values from my simple Jen and start filling these out so we'll grab the value we'll paste it here well grab the actual name of the value I'll play here or the current that is essentially restating this I don't know
the exact reason why it's doing it if anybody knows leave a comment or the dispose we're not doing anything worth disposing of like a stream or something like that so look at empty next was the get enumerator where we return this which is fine then we have the move next function so what I'm gonna do is I'm just gonna copy what we did in the has value and not to run into the same error that we have run into before with the infinite loop where I see where you see I'm incrementing this value I'm gonna do
the same for the parent here okay and if we decide to for some reason get the value for this current the value will be incremented anyway okay so going down next on the reset what do we want to do we want to reset in the middle of enumerated through our my actual gen well we have to set the value to zero or to one again basically the initial state right so let's just set it to one no not too hard to implement this but we have a really simple case and get a numerator it's kind of the same scenario as we
have with this card again I'm not entirely sure what's not entirely sure why this is here but nevertheless all you can do is just basically return yet a numerator and just return this as well okay and that's about it for the actual enumerator implementation all this allows you to do is essentially it's a rate through this for loop and comparing it to our loop essentially the only difference is the one line that we have to basically say we get the value here automatically here we have to extract
the value manually ourselves but essentially this these two implementations are exactly the same so let's go ahead and run this and lo and behold I don't know where that brace came from but no don't not sure exactly what it means look and all of its glory the result is exactly the same right and yeah that's pretty much the generator and a nutshell an explanation and a deep dive the whole shebang if you enjoyed this episode leave a like subscribe you have any questions make sure to leave them in the comment
section I also stream on Wednesdays and Sundays starting around six seven o'clock London time so make sure you tune in for that I also make announcements on discord so make sure you join that hopefully I'll see you my other episodes

--------------------------------------------------------------------------------------------------------------------------

