Semaphore is solving the synchronization between threads problem.
its like a gate for process to pass through.


A semaphore is a synchronization mechanism used in programming 
to manage concurrent access to shared resources by multiple threads or processes. 
It helps in avoiding race conditions, ensuring that only a certain number of threads can access a resource at any given time.

Types of Semaphores:
Counting Semaphore:
    It allows multiple threads to access a limited set of resources. 
    The semaphore maintains a count, representing the number of resources available. 
    Threads can acquire (decrease the count) or release (increase the count) the semaphore.
    Example: If you have a pool of 5 database connections, 
    a counting semaphore with an initial value of 5 can be used to control access, 
    allowing up to 5 threads to use the connections simultaneously.

Binary Semaphore (Mutex):
    It is a special case of the counting semaphore where the count is restricted to 0 or 1, 
    similar to a mutex (mutual exclusion). 
    It is typically used for signaling and mutual exclusion.
    Example: A binary semaphore can be used to ensure that only one thread enters a critical section of code at a time.

Common Operations:
    Wait (P): Decreases the semaphore count. 
    If the count is zero, the calling thread is blocked until the semaphore is released by another thread.
    Signal (V): Increases the semaphore count. 
    If there are threads waiting, one of them is unblocked.

Usage Scenario:
Semaphores are particularly useful in scenarios where you need to control access to limited resources or coordinate the execution order of threads. 
For instance, they can be used in a producer-consumer problem to manage the buffer's access or in a database connection pool to limit the number of active connections.

SemaphoreSlim:
SemaphoreSlim is a lightweight and more efficient implementation of the semaphore in .NET,
designed for scenarios where you don't need the full overhead of a traditional semaphore. 
It is used for controlling access to a resource by multiple threads, 
much like a regular semaphore, but with some performance optimizations and a simplified API.

Key Features of SemaphoreSlim:
    Lightweight: It has a reduced footprint compared to the traditional Semaphore class, 
    making it more suitable for use in scenarios where performance is critical.
    Async Support: SemaphoreSlim supports asynchronous operations through methods like WaitAsync, 
    making it ideal for use in asynchronous programming models.
    Limited to a Single Process: Unlike Semaphore, which can be used for inter-process synchronization, 
    SemaphoreSlim is limited to synchronization within a single process.

Common Methods:
    Wait(): Blocks the current thread until it can enter the semaphore.
    WaitAsync(): Asynchronously waits to enter the semaphore.
    Release(): Exits the semaphore, increasing its count and potentially allowing other threads to enter.