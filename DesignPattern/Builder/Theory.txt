The Builder Pattern is a creational design pattern that lets you construct complex objects step-by-step. 
It separates the construction of a complex object from its representation so that the same construction
process can create different representations.

This pattern is particularly useful when an object needs to be created with many optional parameters or when 
creating an object involves several construction steps.
The Builder pattern allows you to avoid a constructor with numerous parameters 
(often referred to as the "telescoping constructor" anti-pattern) and provides a fluent interface for creating objects.

When to Use the Builder Pattern?
When you have an object with many optional parameters.
When constructing an object involves a complex configuration or several steps.
When you want to isolate the construction logic from the object's representation.
When you want to make the object immutable and need to ensure that it’s properly initialized.

Real-World Example: Building a Car Object

Imagine you want to build a car object. The car can have different attributes like EngineType, Color, Seats, GPS, and so on. Some of these properties are optional, while others are mandatory. Using the Builder pattern, you can separate the logic of constructing the car and ensure that only valid car objects are created.
Project Structure

/BuilderPatternExample
├── CarBuilder.cs
├── Car.cs
├── CarManualBuilder.cs
└── Program.cs
