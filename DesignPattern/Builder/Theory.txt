The Builder Pattern is a creational design pattern that lets you construct complex objects step-by-step. 
It separates the construction of a complex object from its representation so that the same construction
process can create different representations.

This pattern is particularly useful when an object needs to be created with many optional parameters or when 
creating an object involves several construction steps.
The Builder pattern allows you to avoid a constructor with numerous parameters 
(often referred to as the "telescoping constructor" anti-pattern) and provides a fluent interface for creating objects.

When to Use the Builder Pattern?
When you have an object with many optional parameters.
When constructing an object involves a complex configuration or several steps.
When you want to isolate the construction logic from the object's representation.
When you want to make the object immutable and need to ensure that it’s properly initialized.

Real-World Example: Building a Car Object

Imagine you want to build a car object. The car can have different attributes like EngineType, Color, Seats, GPS, and so on. Some of these properties are optional, while others are mandatory. Using the Builder pattern, you can separate the logic of constructing the car and ensure that only valid car objects are created.
Project Structure

/BuilderPatternExample
├── CarBuilder.cs
├── Car.cs
├── CarManualBuilder.cs
└── Program.cs

Key Concepts in the Builder Pattern

    Builder Interface (ICarBuilder): 
    Defines the steps required to build an object (e.g., SetModel, SetEngine).
    Concrete Builder (CarBuilder): 
    Implements the builder interface, constructing and assembling the parts of the product.
    Product (Car): 
    Represents the complex object under construction.
    Director (Director) (Optional): 
    Encapsulates the construction logic for creating specific configurations.
    Fluent Interface: 
    The builder methods return the builder itself, allowing method chaining.

Benefits of Using the Builder Pattern:
    Readable Code: 
    Provides a clear and fluent API for constructing objects.
    Encapsulation: 
    Isolates complex construction logic from the client.
    Flexibility: 
    Allows for constructing different configurations of the same object.
    Avoids Large Constructors: 
    Reduces the need for large constructors with numerous parameters, making the code cleaner and less error-prone.

Summary:
The Builder Pattern is ideal for creating complex objects step-by-step, especially when dealing with numerous optional parameters. 
This pattern provides a flexible solution that separates the construction logic from the object representation, 
making the code easier to maintain and understand.

---
The Builder Design Pattern is a creational pattern used in software design to construct a complex object step by step. 
It allows the construction of a product in a step-by-step fashion, where the construction process can vary 
based on the type of product being built. 
The pattern separates the construction of a complex object from its representation, allowing the same 
construction process to create different representations.

Components of the Builder Design Pattern
1. Product
The Product is the complex object that the Builder pattern is responsible for constructing.
It may consist of multiple components or parts, and its structure can vary based on the implementation.
The Product is typically a class with attributes representing the different parts that the Builder constructs.

2. Builder
The Builder is an interface or an abstract class that declares the construction steps for building a complex object.
It typically includes methods for constructing individual parts of the product.
By defining an interface, the Builder allows for the creation of different concrete builders that can produce variations of the product.

3. ConcreteBuilder
ConcreteBuilder classes implement the Builder interface, providing specific implementations for building each part of the product.
Each ConcreteBuilder is tailored to create a specific variation of the product.
It keeps track of the product being constructed and provides methods for setting or constructing each part.

4. Director
The Director is responsible for managing the construction process of the complex object.
It collaborates with a Builder, but it doesn’t know the specific details about how each part of the object is constructed.
It provides a high-level interface for constructing the product and managing the steps needed to create the complex object.

5. Client
The Client is the code that initiates the construction of the complex object.
It creates a Builder object and passes it to the Director to initiate the construction process.
The Client may retrieve the final product from the Builder after construction is complete.



-------------------------------------------------------------------------------
welcome everybody in this video we're going to cover the builder pattern it is one of the more widely used construction patterns same as the factory pattern it is quite popular sometimes it is used incorrectly and i'm going to try to show you an example of how it's used incorrectly sometimes and how you can shift it towards being used being used in its more intended way so just a quick statement on what the builder pattern is so we take the construction process of an item and we separate it from its
representation okay so if you just imagine some data we want to put it in a square hole or a circle hole or a rectangular or diamond hole or a triangle hole right you take that same data and we just put it into different different holes right if you've imagined that yeah you're good right some people they are not very good with the imagination so let's have a real world example what i have here are a bunch of builders all these builders they implement the i key value collection builder so hopefully from the name of the interface
you get an idea that we have a key a value and that's generally what objects are so if you think about a class where we have a bunch of primitive types it's just a key and a value behind that key right same kind of thing although you can put complex objects in there but never mind right in our example we have an interface and we're just saying we're just gonna keep adding uh key values to here and at the end of the at the end of the process we wanna end up with some kind of representation of what we've been
building so as i said we have a construction process and then many different representations here we have a construction process and it should be apparent what i'm building uh a lot of car make right color red and then the year that it's been made in is 1990 well that's not a very good year 1980.
there we go so uh what i want to do is i want to get this data i want to post it to my api and at the moment i do my model binding from the query to a object or whatever to whatever object my programming language on the backend understands right so what i do is i have my builder i pass it into the construction process which accepts the interface okay so it only accepts the interface you will notice that at the end we build the builder but the build method isn't contained on the ik value collection builder uh you will understand this at the end
but in short the thing that we build doesn't have to inherit from them from one common thing so there is no need to actually finish the building during the construction process we build it outside right so you think about like how we basically dip the builder in into this construction process and by the end we're gonna have our thing in different representations right so in our case we have the query format question mark for the first parameter right so we got so i keep track of the query length and then i have the key
equals and the escape data string value because it's going into the uri so if i would go ahead and do something like i don't know let's say a world run it you can see it puts whatever separation characters there right so super simple now let's say we now want to send it as part of the form we're still building the same data although now it's in a different format okay here we have the form body so if we put it in the form body of the http request good we're still representing the same
object it's still a red ladder 1980. if you don't know what a ladder is go google it what are you doing it then for some bizarre reason we have decided we're gonna put it in http headers google's doing it everybody's doing it why are we not doing it right we've been reading reading some shady forms so there is another representation of http http headers please do not do this and coming back to the point where you don't need the these have all been strings so the query builder the form builder
and the http header builder all of them return strings so it's like a common data type between all of them the last one the last one the dictionary builder again we built the same object although it is a dictionary now so the construction process shouldn't be tied to the return type that you're going to build in the end okay it is literally that abstraction right so this is how you separate the construction process from the representation of what you're building hopefully that makes sense let's go over
how a builder might be used in the wild by some developers me and the past included so right about the builder pattern so take a look at the examples online this is where you came up with one day you were like oh i have a common object in my code i'm gonna use a builder right so you have the car make color manufacturer date and then you make the car builder right which once you create the car builder you get a new car you can set the make and set the color you can set the manufacturer date and at the end you build the car you use
the builder pattern like this i want you to work for my company i can kill you myself don't do this please anyway uh how can we improve this so we are clearly doing something wrong here because look at all this this is like an explosion of these proxy methods which are already doing this thing here right don't do builders for the sake of just slapping on this extra layer and thinking your separating something this is not easier than doing new car and setting these properties like so right let's go over a couple of things how we
can make this better right i'm gonna copy the query here and we're gonna first understand that we want a reusable construction process what are we building in our case it's a red ladder 1980 right so public void where like our construction process doesn't actually return whatever is being built right it just knows how to slap things together so let's say build red ladder 1980 just like that now we need to put our car builder in there for now what we're going to do is we're just going to supply our builder
we will then move all of these methods in there for the builder and now we're really building a red ladder of 1980. there is still not enough abstraction here so the whole point of design patterns is that we want to make our code reusable uh we can't if we ever come up with a second builder so if we want to represent our red ladder in some kind of other funky way we cannot just go ahead and supply a different builder so at the moment the way we call this function is build a red ladder and we'll just say remove about a match grab our
builder stick it in here we cannot just create a new builder so new builder new some kind of new builder right and start passing this new builder the type that doesn't exist because it's not this specific type so what you do is you go ahead and put it behind an interface okay let's just go ahead and say put an eye on the button on the start here and make sure we inherit from this i'm gonna grab these methods here you do not have to make it return the same type these can be void usually you do put them on new lines
anyway why not just call them uh you know this one is a preference let's go i will however it'll just slap them on there because why not i like it right there we go now your interface will have to return the the icar builder as well and everything is a little bit better in the world once we take this icar builder interface and instead of the specific car builder we actually accept an interface and now any other class that implements the same interface which is going to take our red ladder and instead of
representing it in this car class we may put it into an http request right so this is the builder wrong actually close that one yeah we might put it in the query builder or we will combine it so instead of just the form or just the query we may want to put it into an http request overall so some of it will go in the form some of it will go in the query and some of it will go in the headers each individual method now can decide okay just because we've now created a process where it's easy to substitute it this
makes this class a lot more bearable even though it is just a collection of proxy functions all right so we've got a builder we pass it to the build method at the end we grab the builder we build and let's just dump the object out obviously missing some semicolons and there is the car so our red ladder represented in a c sharp object what are some of the other things that you can do to this to improve it don't just have a proxy methods right don't just set the make don't just set the color if
you can if you have a dependency injection available to you do use constructor maybe inject a database do some validation do you support this color do you support this make is the correct thing being inputted you can stick validation in your build as well and for example if you're doing if you're working with dates don't accept a string this may not be the best thing to do do something along the lines of a date time because the string can accept anything when you say date time you're gonna you're gonna narrow it and then you
already know that you're gonna be supplying a date time and by the end of it you can even parse it as well right or sorry not parse it format it the way that you want to so be a little bit more smarter of what your parameters are what your actual methods are doing right so instead of a string where we could i don't know maybe if you have fat fingers like me we'll sometimes type something like this but now this will force you to do something along the lines of time tc now or an actual concrete date this will be the end of this and
hopefully you understand the builder pattern a little bit clearer whoa hold up look this is the stuff i used to torture myself on the weekends now it takes time to digest this and package it up into these videos so if you did enjoy the content please like subscribe if you want to see more leave a comment if you have any questions and if you want to be part of the community that i'm building make sure to join my discord server i also stream on twitch wednesdays and sundays six six o'clock london time i have also
opened up a merch store so if you do want to support me don't just donate buy from there links to all of that and my other social media are in the description hope to see you again and have a good day
