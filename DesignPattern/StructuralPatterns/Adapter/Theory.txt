Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
Convert the interface of a class into another interface clients expect.
Adapter lets classes work together that couldn't otherwise because of incompatible interfaces.
Wrap an existing class with a new interface.
Impedance match an old component to a new system

Problem
Imagine that you’re creating a stock market monitoring app. 
The app downloads the stock data from multiple sources in XML format and then displays 
nice-looking charts and diagrams for the user.
At some point, you decide to improve the app by integrating a smart 3rd-party analytics library.
But there’s a catch: the analytics library only works with data in JSON format.
You could change the library to work with XML. However, this might break some 
existing code that relies on the library. 
And worse, you might not have access to the library’s source code in the first place, 
making this approach impossible.

Solution
You can create an adapter. 
This is a special object that converts the interface of one object so that another object can understand it.
An adapter wraps one of the objects to hide the complexity of conversion happening behind the scenes. 
The wrapped object isn’t even aware of the adapter. 
For example, you can wrap an object that operates in meters and kilometers with an adapter 
that converts all of the data to imperial units such as feet and miles.
Adapters can not only convert data into various formats but can also help objects with different interfaces collaborate. 

Here’s how it works:
The adapter gets an interface, compatible with one of the existing objects.
Using this interface, the existing object can safely call the adapter’s methods.
Upon receiving a call, the adapter passes the request to the second object, but in a format and order that the second object expects.
Sometimes it’s even possible to create a two-way adapter that can convert the calls in both directions.

Applicability
Use the Adapter class when you want to use some existing class, but its interface isn’t compatible with the rest of your code.
The Adapter pattern lets you create a middle-layer class that serves as a translator between your code and a legacy class, 
a 3rd-party class or any other class with a weird interface.
Use the pattern when you want to reuse several existing subclasses that lack some common functionality that can’t be added to the superclass.
You could extend each subclass and put the missing functionality into new child classes. 
However, you’ll need to duplicate the code across all of these new classes, which smells really bad.
The much more elegant solution would be to put the missing functionality into an adapter class. 
Then you would wrap objects with missing features inside the adapter, gaining needed features dynamically. 
For this to work, the target classes must have a common interface, and the adapter’s field should follow that interface. 
This approach looks very similar to the Decorator pattern.

How to Implement
Make sure that you have at least two classes with incompatible interfaces:
A useful service class, which you can’t change (often 3rd-party, legacy or with lots of existing dependencies).
One or several client classes that would benefit from using the service class.
Declare the client interface and describe how clients communicate with the service.
Create the adapter class and make it follow the client interface. Leave all the methods empty for now.
Add a field to the adapter class to store a reference to the service object. 
The common practice is to initialize this field via the constructor, but sometimes it’s more convenient to pass
it to the adapter when calling its methods.
One by one, implement all methods of the client interface in the adapter class. 
The adapter should delegate most of the real work to the service object, handling only the interface or data format conversion.
Clients should use the adapter via the client interface. This will let you change or extend the adapters without affecting the client code.

 Pros and Cons
 Single Responsibility Principle. You can separate the interface or data conversion code from the primary business logic of the program.
 Open/Closed Principle. You can introduce new types of adapters into the program without breaking the existing client code, as long as they work with the adapters through the client interface.
 The overall complexity of the code increases because you need to introduce a set of new interfaces and classes. Sometimes it’s simpler just to change the service class so that it matches the rest of your code.

 ---------------------------------------------

 The Adapter design pattern is a structural pattern that allows the interface of an existing class to be used as another interface. 
 It acts as a bridge between two incompatible interfaces, making them work together. 
 This pattern involves a single class, known as the adapter, which is responsible 
 for joining functionalities of independent or incompatible interfaces.

 Let’s say you have two friends, one who speaks only English and another who speaks only French. 
 You want them to communicate, but there’s a language barrier. 
You act as an adapter, translating messages between them. 
Your role allows the English speaker to convey messages to you, and you convert those messages into French for the other person. 
In this way, despite the language difference, your adaptation enables smooth communication between your friends. 
This role you play is similar to the Adapter design pattern, bridging the gap between incompatible interfaces.

Components of Adapter Design Pattern
1. Target Interface
Description: Defines the interface expected by the client. It represents the set of operations that the client code can use.
Role: It’s the common interface that the client code interacts with.
2. Adaptee
Description: The existing class or system with an incompatible interface that needs to be integrated into the new system.
Role: It’s the class or system that the client code cannot directly use due to interface mismatches.
3. Adapter
Description: A class that implements the target interface and internally uses an instance of the adaptee to make 
it compatible with the target interface.
Role: It acts as a bridge, adapting the interface of the adaptee to match the target interface.
4. Client
Description: The code that uses the target interface to interact with objects. It remains unaware of the 
specific implementation details of the adaptee and the adapter.
Role: It’s the code that benefits from the integration of the adaptee into the system through the adapter.
Adapter Design Pattern Example
Problem Statement
Let’s consider a scenario where we have an existing system that uses a LegacyPrinter class with a method 
named printDocument() which we want to adapt into a new system that expects a Printer interface with a method named print(). 
We’ll use the Adapter design pattern to make these two interfaces compatible.

How Adapter Design Pattern works?
Client Request:
The client initiates a request by calling a method on the adapter using the target interface.
Adapter Translation:
The adapter translates or maps the client’s request into a form that the adaptee understands, using the adaptee’s interface.
Adaptee Execution:
The adaptee performs the actual work based on the translated request from the adapter.
Result to Client:
The client receives the results of the call, remaining unaware of the adapter’s presence or the specific details of the adaptee.
Why do we need Adapter Design Pattern?
Integration of Existing Code:
Scenario: When you have existing code or components with interfaces that are incompatible with the interfaces expected by new code or systems.
Need: The Adapter pattern allows you to integrate existing components seamlessly into new systems without modifying their original code.
Reuse of Existing Functionality:
Scenario: When you want to reuse classes or components that provide valuable functionality but don’t conform to the desired interface.
Need: The Adapter pattern enables you to reuse existing code by creating an adapter that makes it compatible with the interfaces expected by new code.
Interoperability:
Scenario: When you need to make different systems or components work together, especially when they have different interfaces.
Need: The Adapter pattern acts as a bridge, allowing systems with incompatible interfaces to collaborate effectively.
Client-Server Communication:
Scenario: When building client-server applications, and the client expects a specific interface while the server provides a different one.
Need: Adapters help in translating requests and responses between client and server, ensuring smooth communication despite interface differences.
Third-Party Library Integration:
Scenario: When incorporating third-party libraries or APIs into a project, and their interfaces do not match the rest of the system.
Need: Adapters make it possible to use external components by providing a compatible interface for the rest of the application.
When not to use Adapter Design Pattern?
When Interfaces Are Stable:
Scenario: If the interfaces of the existing system and the new system are stable and not expected to change frequently.
Reason: Adapters are most beneficial when dealing with evolving or incompatible interfaces. If the interfaces are stable, the overhead of maintaining adapters might outweigh the benefits.
When Direct Modification Is Feasible:
Scenario: If you have control over the source code of the existing system, and it’s feasible to directly modify its interface to match the target interface.
Reason: If you can modify the existing code, direct adaptation of interfaces might be a simpler and more straightforward solution than introducing adapters.
When Performance is Critical:
Scenario: In performance-critical applications where the overhead introduced by the Adapter pattern is not acceptable.
Reason: Adapters may introduce a level of indirection and abstraction, which could have a minor impact on performance. In situations where every bit of performance matters, the Adapter pattern might not be the best choice.
When Multiple Adapters Are Required:
Scenario: If a system requires numerous adapters for various components, and the complexity of managing these adapters becomes overwhelming.
Reason: Managing a large number of adapters might lead to increased complexity and maintenance challenges. In such cases, reconsider the overall design or explore alternatives.
When Adapters Introduce Ambiguity:
Scenario: When introducing adapters leads to ambiguity or confusion in the overall system architecture.
Reason: If the presence of adapters makes the system design less clear or harder to understand, it may be worthwhile to explore alternative solutions that offer a clearer design.



